# This Travis job script has been generated by a script via
#
#   haskell-ci '--config=cabal.haskell-ci' 'cabal.project'
#
# For more information, see https://github.com/haskell-CI/haskell-ci
#
# version: 0.5.20180830
#
language: c
dist: xenial
git:
  # whether to recursively clone submodules
  submodules: false
branches:
  only:
    - master
cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store
before_cache:
  - rm -fv $CABALHOME/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $CABALHOME/packages/hackage.haskell.org/00-index.*
  - rm -fv $CABALHOME/packages/hackage.haskell.org/*.json
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.cache
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.tar
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.tar.idx
  - rm -rfv $CABALHOME/packages/head.hackage
matrix:
  include:
    - compiler: ghcjs-8.4
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["cabal-install-3.0"]}}
    - compiler: ghc-8.8.1
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.8.1","cabal-install-3.0"]}}
    - compiler: ghc-8.6.5
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.6.5","cabal-install-3.0"]}}
    - compiler: ghc-8.4.4
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.4.4","cabal-install-3.0"]}}
    - compiler: ghc-8.2.2
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.2.2","cabal-install-3.0"]}}
    - compiler: ghc-8.0.2
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.0.2","cabal-install-3.0"]}}
    - compiler: ghc-7.10.3
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-7.10.3","cabal-install-3.0"]}}
    - compiler: ghc-7.8.4
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-7.8.4","cabal-install-3.0"]}}
    - compiler: ghc-7.6.3
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-7.6.3","cabal-install-3.0"]}}
    - compiler: ghc-7.4.2
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-7.4.2","cabal-install-3.0"]}}
  allow_failures:
    - compiler: ghc-8.8.1
before_install:
  - |
    if echo $CC | grep -q ghcjs; then
        GHCJS=true;
    else
        GHCJS=false;
    fi
  - |
    if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      if $GHCJS ; then sudo add-apt-repository -y ppa:hvr/ghcjs ; fi;
      if $GHCJS ; then curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | sudo apt-key add - ; fi;
      if $GHCJS ; then sudo apt-add-repository 'https://deb.nodesource.com/node_8.x xenial main' ; fi;
      if $GHCJS ; then sudo apt-get update ; fi;
      sudo apt-get install $CC;
      if $GHCJS ; then sudo apt-get install -y nodejs cabal-install-3.0 ; fi;
    fi
  - HC=$(echo "/opt/$CC/bin/ghc" | sed 's/-/\//')
  - WITHCOMPILER="-w $HC"
  - if $GHCJS ; then HC=${HC}js ; fi
  - if $GHCJS ; then WITHCOMPILER="--ghcjs ${WITHCOMPILER}js" ; fi
  - HADDOCK=$(echo "/opt/$CC/bin/haddock" | sed 's/-/\//')
  - if $GHCJS ; then sudo apt-get install -y ghc-8.4.4 ; fi
  - if $GHCJS ; then PATH="/opt/ghc/8.4.4/bin:$PATH" ; fi
  - HCPKG="$HC-pkg"
  - unset CC
  - CABAL=/opt/ghc/bin/cabal
  - CABALHOME=$HOME/.cabal
  - export PATH="$CABALHOME/bin:$PATH"
  - TOP=$(pwd)
  - "HCNUMVER=$(${HC} --numeric-version|perl -ne '/^(\\d+)\\.(\\d+)\\.(\\d+)(\\.(\\d+))?$/; print(10000 * $1 + 100 * $2 + ($3 == 0 ? $5 != 1 : $3))')"
  - echo $HCNUMVER
  - CABAL="$CABAL -vnormal+nowrap+markoutput"
  - set -o pipefail
  - |
    echo 'function blue(s) { printf "\033[0;34m" s "\033[0m " }'           >> .colorful.awk
    echo 'BEGIN { state = "output"; }'                                     >> .colorful.awk
    echo '/^-----BEGIN CABAL OUTPUT-----$/ { state = "cabal" }'            >> .colorful.awk
    echo '/^-----END CABAL OUTPUT-----$/ { state = "output" }'             >> .colorful.awk
    echo '!/^(-----BEGIN CABAL OUTPUT-----|-----END CABAL OUTPUT-----)/ {' >> .colorful.awk
    echo '  if (state == "cabal") {'                                       >> .colorful.awk
    echo '    print blue($0)'                                              >> .colorful.awk
    echo '  } else {'                                                      >> .colorful.awk
    echo '    print $0'                                                    >> .colorful.awk
    echo '  }'                                                             >> .colorful.awk
    echo '}'                                                               >> .colorful.awk
  - cat .colorful.awk
  - |
    color_cabal_output () {
      awk -f $TOP/.colorful.awk
    }
  - echo text | color_cabal_output
install:
  - ${CABAL} --version
  - echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - node --version
  - echo $GHCJS
  - TEST=--enable-tests
  - BENCH=--enable-benchmarks
  - HEADHACKAGE=false
  - if ! $GHCJS && [ $HCNUMVER -ge 80800 ] ; then HEADHACKAGE=true ; fi
  - rm -f $CABALHOME/config
  - |
    echo "verbose: normal +nowrap +markoutput"          >> $CABALHOME/config
    echo "remote-build-reporting: anonymous"            >> $CABALHOME/config
    echo "write-ghc-environment-files: always"          >> $CABALHOME/config
    echo "remote-repo-cache: $CABALHOME/packages"       >> $CABALHOME/config
    echo "logs-dir:          $CABALHOME/logs"           >> $CABALHOME/config
    echo "world-file:        $CABALHOME/world"          >> $CABALHOME/config
    echo "extra-prog-path:   $CABALHOME/bin"            >> $CABALHOME/config
    echo "symlink-bindir:    $CABALHOME/bin"            >> $CABALHOME/config
    echo "installdir:        $CABALHOME/bin"            >> $CABALHOME/config
    echo "build-summary:     $CABALHOME/logs/build.log" >> $CABALHOME/config
    echo "store-dir:         $CABALHOME/store"          >> $CABALHOME/config
    echo "install-dirs user"                            >> $CABALHOME/config
    echo "  prefix: $CABALHOME"                         >> $CABALHOME/config
    echo "repository hackage.haskell.org"               >> $CABALHOME/config
    echo "  url: http://hackage.haskell.org/"           >> $CABALHOME/config
  - |
    if $HEADHACKAGE; then
    echo "allow-newer: $($HCPKG list --simple-output | sed -E 's/([a-zA-Z-]+)-[0-9.]+/*:\1/g')" >> $CABALHOME/config
    echo "repository head.hackage.ghc.haskell.org"                                        >> $CABALHOME/config
    echo "   url: https://ghc.gitlab.haskell.org/head.hackage/"                           >> $CABALHOME/config
    echo "   secure: True"                                                                >> $CABALHOME/config
    echo "   root-keys: 7541f32a4ccca4f97aea3b22f5e593ba2c0267546016b992dfadcd2fe944e55d" >> $CABALHOME/config
    echo "              26021a13b401500c8eb2761ca95c61f2d625bfef951b939a8124ed12ecf07329" >> $CABALHOME/config
    echo "              f76d08be13e9a61a377a85e2fb63f4c5435d40f8feb3e12eb05905edb8cdea89" >> $CABALHOME/config
    echo "   key-threshold: 3"                                                            >> $CABALHOME/config
    fi
  - cat $CABALHOME/config
  - rm -fv cabal.project cabal.project.local cabal.project.freeze
  - travis_retry ${CABAL} v2-update -v
  - if $GHCJS ; then (cd /tmp && ${CABAL} v2-install -w ghc-8.4.4 cabal-plan | color_cabal_output) ; fi
  - if $GHCJS ; then (cd /tmp && ${CABAL} v2-install -w ghc-8.4.4 happy | color_cabal_output) ; fi
  # Generate cabal.project
  - rm -rf cabal.project cabal.project.local cabal.project.freeze
  - touch cabal.project
  - |
    echo "packages: these" >> cabal.project
    echo "packages: these-lens" >> cabal.project
    if $GHCJS || ! $GHCJS && [ $HCNUMVER -ge 80000 ] ; then echo "packages: these-optics" >> cabal.project ; fi
    echo "packages: semialign" >> cabal.project
    echo "packages: semialign-indexed" >> cabal.project
    echo "packages: monad-chronicle" >> cabal.project
    echo "packages: these-tests" >> cabal.project
  - |
  - "for pkg in $($HCPKG list --simple-output); do echo $pkg | sed 's/-[^-]*$//' | (grep -vE -- '^(monad-chronicle|semialign|semialign-indexed|these|these-lens|these-optics|these-tests)$' || true) | sed 's/^/constraints: /' | sed 's/$/ installed/' >> cabal.project.local; done"
  - cat cabal.project || true
  - cat cabal.project.local || true
  - if [ -f "these/configure.ac" ]; then (cd "these" && autoreconf -i); fi
  - if [ -f "these-lens/configure.ac" ]; then (cd "these-lens" && autoreconf -i); fi
  - if [ -f "these-optics/configure.ac" ]; then (cd "these-optics" && autoreconf -i); fi
  - if [ -f "semialign/configure.ac" ]; then (cd "semialign" && autoreconf -i); fi
  - if [ -f "semialign-indexed/configure.ac" ]; then (cd "semialign-indexed" && autoreconf -i); fi
  - if [ -f "monad-chronicle/configure.ac" ]; then (cd "monad-chronicle" && autoreconf -i); fi
  - if [ -f "these-tests/configure.ac" ]; then (cd "these-tests" && autoreconf -i); fi
  - ${CABAL} v2-freeze $WITHCOMPILER ${TEST} ${BENCH} | color_cabal_output
  - "cat cabal.project.freeze | sed -E 's/^(constraints: *| *)//' | sed 's/any.//'"
  - rm  cabal.project.freeze
  - ${CABAL} v2-build $WITHCOMPILER ${TEST} ${BENCH} --dep -j2 all | color_cabal_output
  - ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks --dep -j2 all | color_cabal_output
script:
  - DISTDIR=$(mktemp -d /tmp/dist-test.XXXX)
  # Packaging...
  - ${CABAL} v2-sdist all | color_cabal_output
  # Unpacking...
  - mv dist-newstyle/sdist/*.tar.gz ${DISTDIR}/
  - cd ${DISTDIR} || false
  - find . -maxdepth 1 -type f -name '*.tar.gz' -exec tar -xvf '{}' \;
  - find . -maxdepth 1 -type f -name '*.tar.gz' -exec rm       '{}' \;
  - PKGDIR_these="$(find . -maxdepth 1 -type d -regex '.*/these-[0-9.]*')"
  - PKGDIR_these_lens="$(find . -maxdepth 1 -type d -regex '.*/these-lens-[0-9.]*')"
  - PKGDIR_these_optics="$(find . -maxdepth 1 -type d -regex '.*/these-optics-[0-9.]*')"
  - PKGDIR_semialign="$(find . -maxdepth 1 -type d -regex '.*/semialign-[0-9.]*')"
  - PKGDIR_semialign_indexed="$(find . -maxdepth 1 -type d -regex '.*/semialign-indexed-[0-9.]*')"
  - PKGDIR_monad_chronicle="$(find . -maxdepth 1 -type d -regex '.*/monad-chronicle-[0-9.]*')"
  - PKGDIR_these_tests="$(find . -maxdepth 1 -type d -regex '.*/these-tests-[0-9.]*')"
  # Generate cabal.project
  - rm -rf cabal.project cabal.project.local cabal.project.freeze
  - touch cabal.project
  - |
    echo "packages: ${PKGDIR_these}" >> cabal.project
    echo "packages: ${PKGDIR_these_lens}" >> cabal.project
    if $GHCJS || ! $GHCJS && [ $HCNUMVER -ge 80000 ] ; then echo "packages: ${PKGDIR_these_optics}" >> cabal.project ; fi
    echo "packages: ${PKGDIR_semialign}" >> cabal.project
    echo "packages: ${PKGDIR_semialign_indexed}" >> cabal.project
    echo "packages: ${PKGDIR_monad_chronicle}" >> cabal.project
    echo "packages: ${PKGDIR_these_tests}" >> cabal.project
  - |
  - "for pkg in $($HCPKG list --simple-output); do echo $pkg | sed 's/-[^-]*$//' | (grep -vE -- '^(monad-chronicle|semialign|semialign-indexed|these|these-lens|these-optics|these-tests)$' || true) | sed 's/^/constraints: /' | sed 's/$/ installed/' >> cabal.project.local; done"
  - cat cabal.project || true
  - cat cabal.project.local || true
  # Building...
  # this builds all libraries and executables (without tests/benchmarks)
  - ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks all | color_cabal_output
  # Building with tests and benchmarks...
  # build & run tests, build benchmarks
  - ${CABAL} v2-build $WITHCOMPILER ${TEST} ${BENCH} all | color_cabal_output
  # Testing...
  - if ! $GHCJS ; then ${CABAL} v2-test $WITHCOMPILER ${TEST} ${BENCH} all | color_cabal_output ; fi
  - if $GHCJS ; then for testexe in $(cabal-plan list-bins '*:test:*' | awk '{ print $2 }'); do echo $testexe; nodejs ${testexe}.jsexe/all.js; done ; fi
  # cabal check...
  - (cd ${PKGDIR_these} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_these_lens} && ${CABAL} -vnormal check)
  - if $GHCJS || ! $GHCJS && [ $HCNUMVER -ge 80000 ] ; then (cd ${PKGDIR_these_optics} && ${CABAL} -vnormal check) ; fi
  - (cd ${PKGDIR_semialign} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_semialign_indexed} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_monad_chronicle} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_these_tests} && ${CABAL} -vnormal check)
  # haddock...
  - if ! $GHCJS ; then ${CABAL} v2-haddock $WITHCOMPILER --with-haddock $HADDOCK ${TEST} ${BENCH} all | color_cabal_output ; fi
  # Building without installed constraints for packages in global-db...
  - rm -f cabal.project.local
  - ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks all | color_cabal_output
  # Constraint sets
  - rm -rf cabal.project.local
  # Constraint set light
  - ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks --constraint='these -semigroupoids' --constraint='these -aeson' --constraint='these -QuickCheck' --constraint='monad-chronicle -semigroupoids' --constraint='semialign -semigroupoids' all | color_cabal_output
  # Constraint set no-semigroupoids
  - ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks --constraint='these -semigroupoids' --constraint='monad-chronicle -semigroupoids' --constraint='semialign -semigroupoids' all | color_cabal_output
  # Constraint set no-aeson
  - ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks --constraint='these -aeson' all | color_cabal_output
  # Constraint set no-QuickCheck
  - ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks --constraint='these -QuickCheck' all | color_cabal_output

# REGENDATA ["--config=cabal.haskell-ci","cabal.project"]
# EOF
